{"ast":null,"code":"// // import React, { useState } from 'react';\n// // import { useNavigate } from 'react-router-dom';\n// // import axios from 'axios';\n// // import './Registertion.css'; // Import the updated CSS\n// // import { FaUser, FaUserCircle, FaEnvelope, FaLock } from 'react-icons/fa'; // Importing icons\n// // import registerImage from './login.png'; // Add an image for the left section\n\n// // const Register = () => {\n// //   const [fullname, setFullname] = useState('');\n// //   const [username, setUsername] = useState('');\n// //   const [email, setEmail] = useState('');\n// //   const [password, setPassword] = useState('');\n// //   const [confirmPassword, setconfirmPassword] = useState('');\n// //   const [loading, setLoading] = useState(false);\n// //   const [passwordError, setPasswordError] = useState('');\n// //   const [message, setMessage] = useState('');\n// //   const navigate = useNavigate(); // Initialize navigate function\n\n// //   const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9])(?=.*[a-z]).{8,}$/;\n// //   const handlePasswordChange = (e) => {\n// //     const value = e.target.value;\n// //     setPassword(value);\n\n// //     if (!passwordRegex.test(value)) {\n// //       setPasswordError(\n// //         'Password must be at least 8 characters long, include an uppercase letter, a number, and a special character.'\n// //       );\n// //     } else {\n// //       setPasswordError('');\n// //     }\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n// //     if (!passwordRegex.test(password)) {\n// //       setPasswordError(\n// //       alert ('Password must be at least 8 characters long, include an uppercase letter, a number, and a special character.') \n// //       );\n// //       alert('Please ensure the password meets the requirements.');\n// //       return; // Stop the form submission\n// //     }\n\n// //     setLoading(true); // Show the loading state\n// //     setPasswordError(''); // Clear any previous errors\n\n// //     try {\n// //       const response = await axios.post('http://localhost:4000/api/users/register', {\n// //         fullname,\n// //         username,\n// //         email,\n// //         password,\n// //         confirmPassword,\n// //       });\n// //       if(password!==confirmPassword){\n// //         alert('password does not match')\n// //       }\n\n// //       setMessage(response.data.message);\n// //       alert('Registration Successful: ' + response.data.message);\n// //       navigate('/')\n// //     } catch (error) {\n// //       setMessage(error.response?.data?.message || 'Something went wrong');\n// //       alert('Error: ' + (error.response?.data?.message || 'An error occurred'));\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"register-container\">\n// //       <div className=\"register-card\">\n// //         <div className=\"register-image\">\n// //           <img src={registerImage} alt=\"Welcome\" />\n// //         </div>\n\n// //         <form onSubmit={handleSubmit} className=\"register-form\">\n// //           <div className=\"register-header\">\n// //             <h2>Create Account</h2>\n// //             <p>Sign up to get started</p>\n// //           </div>\n\n// //           {/* Full Name */}\n// //           <div className=\"form-control\">\n// //             <div className=\"input-wrapper\">\n// //               <FaUserCircle className=\"input-icon\" />\n// //               <input\n// //                 type=\"text\"\n// //                 id=\"fullname\"\n// //                 value={fullname}\n// //                 onChange={(e) => setFullname(e.target.value)}\n// //                 placeholder=\"Enter your full name\"\n// //                 required\n// //               />\n// //             </div>\n// //           </div>\n\n// //           {/* Username */}\n// //           <div className=\"form-control\">\n// //             <div className=\"input-wrapper\">\n// //               <FaUser className=\"input-icon\" />\n// //               <input\n// //                 type=\"text\"\n// //                 id=\"username\"\n// //                 value={username}\n// //                 onChange={(e) => setUsername(e.target.value)}\n// //                 placeholder=\"Enter your username\"\n// //                 required\n// //               />\n// //             </div>\n// //           </div>\n\n// //           {/* Email */}\n// //           <div className=\"form-control\">\n// //             <div className=\"input-wrapper\">\n// //               <FaEnvelope className=\"input-icon\" />\n// //               <input\n// //                 type=\"email\"\n// //                 id=\"email\"\n// //                 value={email}\n// //                 onChange={(e) => setEmail(e.target.value)}\n// //                 placeholder=\"Enter your email\"\n// //                 required\n// //               />\n// //             </div>\n// //           </div>\n\n// //           {/* Password */}\n// //           <div className=\"form-control\">\n// //             <div className=\"input-wrapper\">\n// //               <FaLock className=\"input-icon\" />\n// //               <input\n// //                 type=\"password\"\n// //                 id=\"password\"\n// //                 value={password}\n// //                 onChange={handlePasswordChange}\n// //                 placeholder=\"Enter your password\"\n// //                 required\n// //               />\n// //             </div>\n// //             <div className=\"input-wrapper\">\n// //               <FaLock className=\"input-icon\" />\n// //               <input\n// //                 type=\"password\"\n// //                 id=\"password\"\n// //                 value={password}\n// //                 onChange={handlePasswordChange}\n// //                 placeholder=\"Confirm your password\"\n// //                 required\n// //               />\n// //             </div>\n// //              {/* {passwordError && <div className=\"password-error\">{passwordError}</div>} */}\n// //           </div> \n\n// //           {/* Submit Button */}\n// //           <button type=\"submit\" className=\"submit-btn\" disabled={loading}>\n// //             {loading ? 'Registering...' : 'Register'}\n// //           </button>\n// //         </form>\n// //       </div>\n\n// //       {/* Success or Error Message */}\n// //       {message && (\n// //         <div className={message.startsWith('Error') ? 'error' : 'success'}>\n// //           {message}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default Register;\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import './Registertion.css'; // Import the updated CSS\n// import { FaUser, FaUserCircle, FaEnvelope, FaLock } from 'react-icons/fa'; // Importing icons\n// import registerImage from './login.png'; // Add an image for the left section\n\n// const Register = () => {\n//   const [fullname, setFullname] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [confirmPassword, setConfirmPassword] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [passwordError, setPasswordError] = useState('');\n//   const [message, setMessage] = useState('');\n//   const navigate = useNavigate(); // Initialize navigate function\n\n//   const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9])(?=.*[a-z]).{8,}$/;\n\n//   const handlePasswordChange = (e) => {\n//     const value = e.target.value;\n//     setPassword(value);\n\n//     if (!passwordRegex.test(value)) {\n//       setPasswordError(\n//         'Password must be at least 8 characters long, include an uppercase letter, a number, and a special character.'\n//       );\n//     } else {\n//       setPasswordError('');\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (!passwordRegex.test(password)) {\n//       alert('Please ensure the password meets the requirements.');\n//       return; // Stop the form submission\n//     }\n\n//     if (password !== confirmPassword) {\n//       alert('Passwords do not match');\n//       return; // Stop the form submission\n//     }\n\n//     setLoading(true); // Show the loading state\n//     setPasswordError(''); // Clear any previous errors\n\n//     try {\n//       const response = await axios.post('http://localhost:4000/api/users/register', {\n//         fullname,\n//         username,\n//         email,\n//         password,\n//         confirmPassword,\n//       });\n\n//       setMessage(response.data.message);\n//       alert('Registration Successful: ' + response.data.message);\n//       navigate('/');\n//     } catch (error) {\n//       setMessage(error.response?.data?.message || 'Something went wrong');\n//       alert('Error: ' + (error.response?.data?.message || 'An error occurred'));\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"register-container\">\n//       <div className=\"register-card\">\n//         <div className=\"register-image\">\n//           <img src={registerImage} alt=\"Welcome\" />\n//         </div>\n\n//         <form onSubmit={handleSubmit} className=\"register-form\">\n//           <div className=\"register-header\">\n//             <h2>Create Account</h2>\n//             <p>Sign up to get started</p>\n//           </div>\n\n//           {/* Full Name */}\n//           <div className=\"form-control\">\n//             <div className=\"input-wrapper\">\n//               <FaUserCircle className=\"input-icon\" />\n//               <input\n//                 type=\"text\"\n//                 id=\"fullname\"\n//                 value={fullname}\n//                 onChange={(e) => setFullname(e.target.value)}\n//                 placeholder=\"Enter your full name\"\n//                 required\n//               />\n//             </div>\n//           </div>\n\n//           {/* Username */}\n//           <div className=\"form-control\">\n//             <div className=\"input-wrapper\">\n//               <FaUser className=\"input-icon\" />\n//               <input\n//                 type=\"text\"\n//                 id=\"username\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//                 placeholder=\"Enter your username\"\n//                 required\n//               />\n//             </div>\n//           </div>\n\n//           {/* Email */}\n//           <div className=\"form-control\">\n//             <div className=\"input-wrapper\">\n//               <FaEnvelope className=\"input-icon\" />\n//               <input\n//                 type=\"email\"\n//                 id=\"email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//                 placeholder=\"Enter your email\"\n//                 required\n//               />\n//             </div>\n//           </div>\n\n//           {/* Password */}\n//           <div className=\"form-control\">\n//             <div className=\"input-wrapper\">\n//               <FaLock className=\"input-icon\" />\n//               <input\n//                 type=\"password\"\n//                 id=\"password\"\n//                 value={password}\n//                 onChange={handlePasswordChange}\n//                 placeholder=\"Enter your password\"\n//                 required\n//               />\n//             </div>\n//             <div className=\"form-control\">\n//             <div className=\"input-wrapper\">\n//               <FaLock className=\"input-icon\" />\n//               <input\n//                 type=\"password\"\n//                 id=\"password\"\n//                 value={confirmPassword}\n//                 onChange={handlePasswordChange}\n//                 placeholder=\"confirm your password\"\n//                 required\n//               />\n//             </div>\n//           </div>\n\n//           {/* Submit Button */}\n//           <button type=\"submit\" className=\"submit-btn\" disabled={loading}>\n//             {loading ? 'Registering...' : 'Register'}\n//           </button>\n//         </form>\n//       </div>\n\n//       {/* Success or Error Message */}\n//       {message && (\n//         <div className={message.startsWith('Error') ? 'error' : 'success'}>\n//           {message}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Register;\n// const bcrypt = require('bcrypt');\n// const jwt = require('jsonwebtoken');\n// const userModel = require('../models/userModel');\n\n// const register = async (req, res) => {\n//   const { fullname, username, password, email,confirmPassword } = req.body;\n//   if (password !== confirmPassword) {\n//     return res.status(400).json({ error: 'Passwords do not match' });\n//   }\n//   try {\n\n//     bcrypt.genSalt(10, (err, salt) => {\n//       if (err) throw err;\n//       bcrypt.hash(password, salt, async (err, hashedPassword) => {\n//         if (err) throw err;\n\n//         const user = await userModel.create({\n//           fullname,\n//           username,\n//           password: hashedPassword,\n//           email,\n//         });\n\n//   console.log(user);\n//         const token = jwt.sign({ email: user.email }, \"shhhhhhhhhhh\" , { expiresIn: '1d' });\n//         res.cookie('token', token, { httpOnly: true });\n//         res.status(201).json({ message: 'User registered successfully', token });\n//       });\n//     });\n//   } catch (error) {\n//     res.status(500).json({ message: 'Error during registration', error });\n//   }\n// };\n\n// const login = async (req, res) => {\n//   const { email, password } = req.body;\n\n//   try {\n\n//     const user = await userModel.findOne({ email });\n//     if (!user) return res.status(404).json({ message: 'User not found!' });\n\n//     // Compare password\n//     bcrypt.compare(password, user.password, (err, result) => {\n//       if (err || !result) return res.status(401).json({ message: 'Invalid credentials!' });\n\n//       const token = jwt.sign({ email: user.email },  \"shhhhhhhhhhh\", { expiresIn: '1d' });\n//       res.cookie('token', token, { httpOnly: true });\n//       res.status(200).json({ message: 'Login successful', token });\n//     });\n//   } catch (error) {\n//     res.status(500).json({ message: 'Error during login', error });\n//   }\n// };\n\n// module.exports = { register, login };\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst userModel = require('../models/userModel');\nconst dotenv = require('dotenv');\n\n// Load environment variables from a .env file\ndotenv.config();\nconst register = async (req, res) => {\n  const {\n    fullname,\n    username,\n    password,\n    email,\n    confirmPassword\n  } = req.body;\n\n  // Validate password match\n  if (password !== confirmPassword) {\n    return res.status(400).json({\n      error: 'Passwords do not match'\n    });\n  }\n  try {\n    // Hash password\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    // Create new user\n    const user = await userModel.create({\n      fullname,\n      username,\n      email,\n      password: hashedPassword\n    });\n\n    // Create JWT token\n    const token = jwt.sign({\n      email: user.email\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1d'\n    });\n\n    // Set token in a secure cookie\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production' // set secure to true for production\n    });\n    res.status(201).json({\n      message: 'User registered successfully',\n      token\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error during registration',\n      error: error.message\n    });\n  }\n};\nconst login = async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    // Find user by email\n    const user = await userModel.findOne({\n      email\n    });\n    if (!user) return res.status(404).json({\n      message: 'User not found!'\n    });\n\n    // Compare password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(401).json({\n      message: 'Invalid credentials!'\n    });\n\n    // Create JWT token\n    const token = jwt.sign({\n      email: user.email\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1d'\n    });\n\n    // Set token in a secure cookie\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production' // set secure to true for production\n    });\n    res.status(200).json({\n      message: 'Login successful',\n      token\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error during login',\n      error: error.message\n    });\n  }\n};\nmodule.exports = {\n  register,\n  login\n};","map":{"version":3,"names":["bcrypt","require","jwt","userModel","dotenv","config","register","req","res","fullname","username","password","email","confirmPassword","body","status","json","error","salt","genSalt","hashedPassword","hash","user","create","token","sign","process","env","JWT_SECRET","expiresIn","cookie","httpOnly","secure","NODE_ENV","message","login","findOne","isMatch","compare","module","exports"],"sources":["C:/Users/Dell/Desktop/Authentication-Task/frontsidee/src/components/Register.js"],"sourcesContent":["// // import React, { useState } from 'react';\r\n// // import { useNavigate } from 'react-router-dom';\r\n// // import axios from 'axios';\r\n// // import './Registertion.css'; // Import the updated CSS\r\n// // import { FaUser, FaUserCircle, FaEnvelope, FaLock } from 'react-icons/fa'; // Importing icons\r\n// // import registerImage from './login.png'; // Add an image for the left section\r\n\r\n// // const Register = () => {\r\n// //   const [fullname, setFullname] = useState('');\r\n// //   const [username, setUsername] = useState('');\r\n// //   const [email, setEmail] = useState('');\r\n// //   const [password, setPassword] = useState('');\r\n// //   const [confirmPassword, setconfirmPassword] = useState('');\r\n// //   const [loading, setLoading] = useState(false);\r\n// //   const [passwordError, setPasswordError] = useState('');\r\n// //   const [message, setMessage] = useState('');\r\n// //   const navigate = useNavigate(); // Initialize navigate function\r\n\r\n// //   const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9])(?=.*[a-z]).{8,}$/;\r\n// //   const handlePasswordChange = (e) => {\r\n// //     const value = e.target.value;\r\n// //     setPassword(value);\r\n\r\n// //     if (!passwordRegex.test(value)) {\r\n// //       setPasswordError(\r\n// //         'Password must be at least 8 characters long, include an uppercase letter, a number, and a special character.'\r\n// //       );\r\n// //     } else {\r\n// //       setPasswordError('');\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleSubmit = async (event) => {\r\n// //     event.preventDefault();\r\n// //     if (!passwordRegex.test(password)) {\r\n// //       setPasswordError(\r\n// //       alert ('Password must be at least 8 characters long, include an uppercase letter, a number, and a special character.') \r\n// //       );\r\n// //       alert('Please ensure the password meets the requirements.');\r\n// //       return; // Stop the form submission\r\n// //     }\r\n    \r\n// //     setLoading(true); // Show the loading state\r\n// //     setPasswordError(''); // Clear any previous errors\r\n\r\n// //     try {\r\n// //       const response = await axios.post('http://localhost:4000/api/users/register', {\r\n// //         fullname,\r\n// //         username,\r\n// //         email,\r\n// //         password,\r\n// //         confirmPassword,\r\n// //       });\r\n// //       if(password!==confirmPassword){\r\n// //         alert('password does not match')\r\n// //       }\r\n\r\n// //       setMessage(response.data.message);\r\n// //       alert('Registration Successful: ' + response.data.message);\r\n// //       navigate('/')\r\n// //     } catch (error) {\r\n// //       setMessage(error.response?.data?.message || 'Something went wrong');\r\n// //       alert('Error: ' + (error.response?.data?.message || 'An error occurred'));\r\n// //     } finally {\r\n// //       setLoading(false);\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"register-container\">\r\n// //       <div className=\"register-card\">\r\n// //         <div className=\"register-image\">\r\n// //           <img src={registerImage} alt=\"Welcome\" />\r\n// //         </div>\r\n\r\n// //         <form onSubmit={handleSubmit} className=\"register-form\">\r\n// //           <div className=\"register-header\">\r\n// //             <h2>Create Account</h2>\r\n// //             <p>Sign up to get started</p>\r\n// //           </div>\r\n\r\n// //           {/* Full Name */}\r\n// //           <div className=\"form-control\">\r\n// //             <div className=\"input-wrapper\">\r\n// //               <FaUserCircle className=\"input-icon\" />\r\n// //               <input\r\n// //                 type=\"text\"\r\n// //                 id=\"fullname\"\r\n// //                 value={fullname}\r\n// //                 onChange={(e) => setFullname(e.target.value)}\r\n// //                 placeholder=\"Enter your full name\"\r\n// //                 required\r\n// //               />\r\n// //             </div>\r\n// //           </div>\r\n\r\n// //           {/* Username */}\r\n// //           <div className=\"form-control\">\r\n// //             <div className=\"input-wrapper\">\r\n// //               <FaUser className=\"input-icon\" />\r\n// //               <input\r\n// //                 type=\"text\"\r\n// //                 id=\"username\"\r\n// //                 value={username}\r\n// //                 onChange={(e) => setUsername(e.target.value)}\r\n// //                 placeholder=\"Enter your username\"\r\n// //                 required\r\n// //               />\r\n// //             </div>\r\n// //           </div>\r\n\r\n// //           {/* Email */}\r\n// //           <div className=\"form-control\">\r\n// //             <div className=\"input-wrapper\">\r\n// //               <FaEnvelope className=\"input-icon\" />\r\n// //               <input\r\n// //                 type=\"email\"\r\n// //                 id=\"email\"\r\n// //                 value={email}\r\n// //                 onChange={(e) => setEmail(e.target.value)}\r\n// //                 placeholder=\"Enter your email\"\r\n// //                 required\r\n// //               />\r\n// //             </div>\r\n// //           </div>\r\n\r\n// //           {/* Password */}\r\n// //           <div className=\"form-control\">\r\n// //             <div className=\"input-wrapper\">\r\n// //               <FaLock className=\"input-icon\" />\r\n// //               <input\r\n// //                 type=\"password\"\r\n// //                 id=\"password\"\r\n// //                 value={password}\r\n// //                 onChange={handlePasswordChange}\r\n// //                 placeholder=\"Enter your password\"\r\n// //                 required\r\n// //               />\r\n// //             </div>\r\n// //             <div className=\"input-wrapper\">\r\n// //               <FaLock className=\"input-icon\" />\r\n// //               <input\r\n// //                 type=\"password\"\r\n// //                 id=\"password\"\r\n// //                 value={password}\r\n// //                 onChange={handlePasswordChange}\r\n// //                 placeholder=\"Confirm your password\"\r\n// //                 required\r\n// //               />\r\n// //             </div>\r\n// //              {/* {passwordError && <div className=\"password-error\">{passwordError}</div>} */}\r\n// //           </div> \r\n\r\n// //           {/* Submit Button */}\r\n// //           <button type=\"submit\" className=\"submit-btn\" disabled={loading}>\r\n// //             {loading ? 'Registering...' : 'Register'}\r\n// //           </button>\r\n// //         </form>\r\n// //       </div>\r\n\r\n// //       {/* Success or Error Message */}\r\n// //       {message && (\r\n// //         <div className={message.startsWith('Error') ? 'error' : 'success'}>\r\n// //           {message}\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default Register;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import './Registertion.css'; // Import the updated CSS\r\n// import { FaUser, FaUserCircle, FaEnvelope, FaLock } from 'react-icons/fa'; // Importing icons\r\n// import registerImage from './login.png'; // Add an image for the left section\r\n\r\n// const Register = () => {\r\n//   const [fullname, setFullname] = useState('');\r\n//   const [username, setUsername] = useState('');\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [confirmPassword, setConfirmPassword] = useState('');\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [passwordError, setPasswordError] = useState('');\r\n//   const [message, setMessage] = useState('');\r\n//   const navigate = useNavigate(); // Initialize navigate function\r\n\r\n//   const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9])(?=.*[a-z]).{8,}$/;\r\n\r\n//   const handlePasswordChange = (e) => {\r\n//     const value = e.target.value;\r\n//     setPassword(value);\r\n\r\n//     if (!passwordRegex.test(value)) {\r\n//       setPasswordError(\r\n//         'Password must be at least 8 characters long, include an uppercase letter, a number, and a special character.'\r\n//       );\r\n//     } else {\r\n//       setPasswordError('');\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     if (!passwordRegex.test(password)) {\r\n//       alert('Please ensure the password meets the requirements.');\r\n//       return; // Stop the form submission\r\n//     }\r\n\r\n//     if (password !== confirmPassword) {\r\n//       alert('Passwords do not match');\r\n//       return; // Stop the form submission\r\n//     }\r\n\r\n//     setLoading(true); // Show the loading state\r\n//     setPasswordError(''); // Clear any previous errors\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:4000/api/users/register', {\r\n//         fullname,\r\n//         username,\r\n//         email,\r\n//         password,\r\n//         confirmPassword,\r\n//       });\r\n\r\n//       setMessage(response.data.message);\r\n//       alert('Registration Successful: ' + response.data.message);\r\n//       navigate('/');\r\n//     } catch (error) {\r\n//       setMessage(error.response?.data?.message || 'Something went wrong');\r\n//       alert('Error: ' + (error.response?.data?.message || 'An error occurred'));\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"register-container\">\r\n//       <div className=\"register-card\">\r\n//         <div className=\"register-image\">\r\n//           <img src={registerImage} alt=\"Welcome\" />\r\n//         </div>\r\n\r\n//         <form onSubmit={handleSubmit} className=\"register-form\">\r\n//           <div className=\"register-header\">\r\n//             <h2>Create Account</h2>\r\n//             <p>Sign up to get started</p>\r\n//           </div>\r\n\r\n//           {/* Full Name */}\r\n//           <div className=\"form-control\">\r\n//             <div className=\"input-wrapper\">\r\n//               <FaUserCircle className=\"input-icon\" />\r\n//               <input\r\n//                 type=\"text\"\r\n//                 id=\"fullname\"\r\n//                 value={fullname}\r\n//                 onChange={(e) => setFullname(e.target.value)}\r\n//                 placeholder=\"Enter your full name\"\r\n//                 required\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Username */}\r\n//           <div className=\"form-control\">\r\n//             <div className=\"input-wrapper\">\r\n//               <FaUser className=\"input-icon\" />\r\n//               <input\r\n//                 type=\"text\"\r\n//                 id=\"username\"\r\n//                 value={username}\r\n//                 onChange={(e) => setUsername(e.target.value)}\r\n//                 placeholder=\"Enter your username\"\r\n//                 required\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Email */}\r\n//           <div className=\"form-control\">\r\n//             <div className=\"input-wrapper\">\r\n//               <FaEnvelope className=\"input-icon\" />\r\n//               <input\r\n//                 type=\"email\"\r\n//                 id=\"email\"\r\n//                 value={email}\r\n//                 onChange={(e) => setEmail(e.target.value)}\r\n//                 placeholder=\"Enter your email\"\r\n//                 required\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Password */}\r\n//           <div className=\"form-control\">\r\n//             <div className=\"input-wrapper\">\r\n//               <FaLock className=\"input-icon\" />\r\n//               <input\r\n//                 type=\"password\"\r\n//                 id=\"password\"\r\n//                 value={password}\r\n//                 onChange={handlePasswordChange}\r\n//                 placeholder=\"Enter your password\"\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-control\">\r\n//             <div className=\"input-wrapper\">\r\n//               <FaLock className=\"input-icon\" />\r\n//               <input\r\n//                 type=\"password\"\r\n//                 id=\"password\"\r\n//                 value={confirmPassword}\r\n//                 onChange={handlePasswordChange}\r\n//                 placeholder=\"confirm your password\"\r\n//                 required\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Submit Button */}\r\n//           <button type=\"submit\" className=\"submit-btn\" disabled={loading}>\r\n//             {loading ? 'Registering...' : 'Register'}\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n\r\n//       {/* Success or Error Message */}\r\n//       {message && (\r\n//         <div className={message.startsWith('Error') ? 'error' : 'success'}>\r\n//           {message}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Register;\r\n// const bcrypt = require('bcrypt');\r\n// const jwt = require('jsonwebtoken');\r\n// const userModel = require('../models/userModel');\r\n\r\n// const register = async (req, res) => {\r\n//   const { fullname, username, password, email,confirmPassword } = req.body;\r\n//   if (password !== confirmPassword) {\r\n//     return res.status(400).json({ error: 'Passwords do not match' });\r\n//   }\r\n//   try {\r\n  \r\n//     bcrypt.genSalt(10, (err, salt) => {\r\n//       if (err) throw err;\r\n//       bcrypt.hash(password, salt, async (err, hashedPassword) => {\r\n//         if (err) throw err;\r\n\r\n//         const user = await userModel.create({\r\n//           fullname,\r\n//           username,\r\n//           password: hashedPassword,\r\n//           email,\r\n//         });\r\n        \r\n//   console.log(user);\r\n//         const token = jwt.sign({ email: user.email }, \"shhhhhhhhhhh\" , { expiresIn: '1d' });\r\n//         res.cookie('token', token, { httpOnly: true });\r\n//         res.status(201).json({ message: 'User registered successfully', token });\r\n//       });\r\n//     });\r\n//   } catch (error) {\r\n//     res.status(500).json({ message: 'Error during registration', error });\r\n//   }\r\n// };\r\n\r\n\r\n// const login = async (req, res) => {\r\n//   const { email, password } = req.body;\r\n\r\n//   try {\r\n \r\n//     const user = await userModel.findOne({ email });\r\n//     if (!user) return res.status(404).json({ message: 'User not found!' });\r\n\r\n//     // Compare password\r\n//     bcrypt.compare(password, user.password, (err, result) => {\r\n//       if (err || !result) return res.status(401).json({ message: 'Invalid credentials!' });\r\n\r\n     \r\n//       const token = jwt.sign({ email: user.email },  \"shhhhhhhhhhh\", { expiresIn: '1d' });\r\n//       res.cookie('token', token, { httpOnly: true });\r\n//       res.status(200).json({ message: 'Login successful', token });\r\n//     });\r\n//   } catch (error) {\r\n//     res.status(500).json({ message: 'Error during login', error });\r\n//   }\r\n// };\r\n\r\n// module.exports = { register, login };\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst userModel = require('../models/userModel');\r\nconst dotenv = require('dotenv');\r\n\r\n// Load environment variables from a .env file\r\ndotenv.config();\r\n\r\nconst register = async (req, res) => {\r\n  const { fullname, username, password, email, confirmPassword } = req.body;\r\n\r\n  // Validate password match\r\n  if (password !== confirmPassword) {\r\n    return res.status(400).json({ error: 'Passwords do not match' });\r\n  }\r\n\r\n  try {\r\n    // Hash password\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n    // Create new user\r\n    const user = await userModel.create({\r\n      fullname,\r\n      username,\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n\r\n    // Create JWT token\r\n    const token = jwt.sign({ email: user.email }, process.env.JWT_SECRET, { expiresIn: '1d' });\r\n\r\n    // Set token in a secure cookie\r\n    res.cookie('token', token, { \r\n      httpOnly: true, \r\n      secure: process.env.NODE_ENV === 'production', // set secure to true for production\r\n    });\r\n\r\n    res.status(201).json({ message: 'User registered successfully', token });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error during registration', error: error.message });\r\n  }\r\n};\r\n\r\nconst login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Find user by email\r\n    const user = await userModel.findOne({ email });\r\n    if (!user) return res.status(404).json({ message: 'User not found!' });\r\n\r\n    // Compare password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(401).json({ message: 'Invalid credentials!' });\r\n\r\n    // Create JWT token\r\n    const token = jwt.sign({ email: user.email }, process.env.JWT_SECRET, { expiresIn: '1d' });\r\n\r\n    // Set token in a secure cookie\r\n    res.cookie('token', token, { \r\n      httpOnly: true, \r\n      secure: process.env.NODE_ENV === 'production', // set secure to true for production\r\n    });\r\n\r\n    res.status(200).json({ message: 'Login successful', token });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error during login', error: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { register, login };\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}