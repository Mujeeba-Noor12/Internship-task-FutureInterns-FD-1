{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\Authentication-Task\\\\frontsidee\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component to wrap the app and provide the user state\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // Store logged-in user data\n  const [loading, setLoading] = useState(true); // Loading state while checking login status\n  const [error, setError] = useState(null); // For error handling\n\n  // Check if user is logged in when the app starts\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/api/users/user-dashboard', {\n          withCredentials: true\n        });\n        setUser(response.data.user); // Set the user if logged in\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        setError('Failed to fetch user data'); // Optionally set an error message\n        setUser(null); // If error, user is not logged in\n      } finally {\n        setLoading(false); // Stop loading once the check is complete\n      }\n    };\n    fetchUser();\n  }, []);\n\n  // Login and logout functions\n  const login = userData => setUser(userData); // Set user data on login\n  const logout = () => setUser(null); // Clear user data on logout\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","fetchUser","response","get","withCredentials","data","console","login","userData","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/Authentication-Task/frontsidee/src/contexts/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create the context\r\nconst AuthContext = createContext();\r\n\r\n// AuthProvider component to wrap the app and provide the user state\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);  // Store logged-in user data\r\n  const [loading, setLoading] = useState(true);  // Loading state while checking login status\r\n  const [error, setError] = useState(null); // For error handling\r\n\r\n  // Check if user is logged in when the app starts\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:4000/api/users/user-dashboard', { withCredentials: true });\r\n        setUser(response.data.user);  // Set the user if logged in\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n        setError('Failed to fetch user data');  // Optionally set an error message\r\n        setUser(null);  // If error, user is not logged in\r\n      } finally {\r\n        setLoading(false);  // Stop loading once the check is complete\r\n      }\r\n    };\r\n    fetchUser();\r\n  }, []);\r\n\r\n  // Login and logout functions\r\n  const login = (userData) => setUser(userData);  // Set user data on login\r\n  const logout = () => setUser(null);  // Clear user data on logout\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, error, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACzC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC/C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,gDAAgD,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAC,CAAC;QAC7GR,OAAO,CAACM,QAAQ,CAACG,IAAI,CAACV,IAAI,CAAC,CAAC,CAAE;MAChC,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdO,OAAO,CAACP,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDC,QAAQ,CAAC,2BAA2B,CAAC,CAAC,CAAE;QACxCJ,OAAO,CAAC,IAAI,CAAC,CAAC,CAAE;MAClB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;MACtB;IACF,CAAC;IACDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,KAAK,GAAIC,QAAQ,IAAKZ,OAAO,CAACY,QAAQ,CAAC,CAAC,CAAE;EAChD,MAAMC,MAAM,GAAGA,CAAA,KAAMb,OAAO,CAAC,IAAI,CAAC,CAAC,CAAE;;EAErC,oBACEN,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,IAAI;MAAEE,OAAO;MAAEE,KAAK;MAAEQ,KAAK;MAAEE;IAAO,CAAE;IAAAhB,QAAA,EAClEA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACrB,EAAA,CA/BWF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAiCzB,eAAeD,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}