{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\Authentication-Task\\\\frontsidee\\\\src\\\\components\\\\Login.js\";\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import {\n//   Box,\n//   Button,\n//   FormControl,\n//   FormLabel,\n//   Input,\n//   Heading,\n//   Text,\n\n//   Stack,\n//   Flex,\n//   Image,\n// } from '@chakra-ui/react';\n// import { useToast } from '@chakra-ui/react';\n\n// const Login = () => {\n//   // States for form fields\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [error, setError] = useState('');\n//   const [message, setMessage] = useState('');\n\n//   const toast = useToast();  // Chakra UI Toast for error/success messages\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       // Clear previous messages\n//       setError('');\n//       setMessage('');\n\n//       // Make API request to login endpoint\n//       const response = await axios.post(\n//         'http://localhost:4000/api/users/login',\n//         { email, password },\n//         {\n//           withCredentials: true,\n//         }\n//       );\n\n//       // Handle success\n//       if (response.status === 200) {\n//         setMessage(response.data.message);\n//         setEmail('');\n//         setPassword('');\n//         toast({\n//           title: 'Login successful!',\n//           description: response.data.message,\n//           status: 'success',\n//           duration: 5000,\n//           isClosable: true,\n//         });\n//       }\n//     } catch (error) {\n//       // Handle error\n//       if (error.response) {\n//         setError(error.response.data.message); // Error from backend\n//         toast({\n//           title: 'Error',\n//           description: error.response.data.message,\n//           status: 'error',\n//           duration: 5000,\n//           isClosable: true,\n//         });\n//       } else {\n//         setError('An error occurred. Please try again later.');\n//         toast({\n//           title: 'Error',\n//           description: 'An error occurred. Please try again later.',\n//           status: 'error',\n//           duration: 5000,\n//           isClosable: true,\n//         });\n//       }\n//     }\n//   };\n\n//   return (\n//     <Flex minHeight=\"100vh\" align=\"center\" justify=\"center\">\n//       <Box\n//         maxWidth=\"lg\"\n//         width=\"full\"\n//         p={6}\n//         borderRadius=\"md\"\n//         boxShadow=\"md\"\n//         bg=\"white\"\n//         display=\"flex\"\n//         flexDirection={{ base: 'column', lg: 'row' }}\n//         alignItems=\"center\"\n//         justifyContent=\"center\"\n//       >\n//         {/* Left side: Image */}\n//         <Box flex=\"1\" display={{ base: 'none', lg: 'block' }} paddingRight=\"6\">\n//           <Image\n//             src=\"https://via.placeholder.com/400x300\" // Replace with your image URL\n//             alt=\"Login Illustration\"\n//             borderRadius=\"md\"\n//             boxShadow=\"lg\"\n//           />\n//         </Box>\n\n//         {/* Right side: Login Form */}\n//         <Box flex=\"2\" width=\"100%\">\n//           <Heading as=\"h2\" size=\"lg\" mb={4} textAlign=\"center\">\n//             Login\n//           </Heading>\n//           {error && <Text color=\"red.500\" mb={4}>{error}</Text>}\n//           {message && <Text color=\"green.500\" mb={4}>{message}</Text>}\n\n//           <form onSubmit={handleSubmit}>\n//             <Stack spacing={4}>\n//               {/* Email Field */}\n//               <FormControl isRequired>\n//                 <FormLabel htmlFor=\"email\">Email</FormLabel>\n//                 <Input\n//                   type=\"email\"\n//                   id=\"email\"\n//                   value={email}\n//                   onChange={(e) => setEmail(e.target.value)}\n//                   placeholder=\"Enter your email\"\n//                   size=\"lg\"\n//                 />\n//               </FormControl>\n\n//               {/* Password Field */}\n//               <FormControl isRequired>\n//                 <FormLabel htmlFor=\"password\">Password</FormLabel>\n//                 <Input\n//                   type=\"password\"\n//                   id=\"password\"\n//                   value={password}\n//                   onChange={(e) => setPassword(e.target.value)}\n//                   placeholder=\"Enter your password\"\n//                   size=\"lg\"\n//                 />\n//               </FormControl>\n\n//               {/* Submit Button */}\n//               <Button\n//                 type=\"submit\"\n//                 colorScheme=\"teal\"\n//                 size=\"lg\"\n//                 width=\"full\"\n//                 mt={4}\n//                 isLoading={false}\n//               >\n//                 Login\n//               </Button>\n\n//               <Text textAlign=\"center\" mt={4}>\n//                 Don't have an account? <a href=\"/register\">Sign up</a>\n//               </Text>\n//             </Stack>\n//           </form>\n//         </Box>\n//       </Box>\n//     </Flex>\n//   );\n// };\n\n// export default Login;  \nimport { Alert, AlertIcon } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  return /*#__PURE__*/_jsxDEV(Alert, {\n    status: \"success\",\n    children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), \"This is a success message!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_c = Login;\nexport default Lo;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["Alert","AlertIcon","jsxDEV","_jsxDEV","Login","status","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Lo","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/Authentication-Task/frontsidee/src/components/Login.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Input,\r\n//   Heading,\r\n//   Text,\r\n \r\n//   Stack,\r\n//   Flex,\r\n//   Image,\r\n// } from '@chakra-ui/react';\r\n// import { useToast } from '@chakra-ui/react';\r\n\r\n// const Login = () => {\r\n//   // States for form fields\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [message, setMessage] = useState('');\r\n\r\n//   const toast = useToast();  // Chakra UI Toast for error/success messages\r\n\r\n//   // Handle form submission\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       // Clear previous messages\r\n//       setError('');\r\n//       setMessage('');\r\n\r\n//       // Make API request to login endpoint\r\n//       const response = await axios.post(\r\n//         'http://localhost:4000/api/users/login',\r\n//         { email, password },\r\n//         {\r\n//           withCredentials: true,\r\n//         }\r\n//       );\r\n\r\n//       // Handle success\r\n//       if (response.status === 200) {\r\n//         setMessage(response.data.message);\r\n//         setEmail('');\r\n//         setPassword('');\r\n//         toast({\r\n//           title: 'Login successful!',\r\n//           description: response.data.message,\r\n//           status: 'success',\r\n//           duration: 5000,\r\n//           isClosable: true,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       // Handle error\r\n//       if (error.response) {\r\n//         setError(error.response.data.message); // Error from backend\r\n//         toast({\r\n//           title: 'Error',\r\n//           description: error.response.data.message,\r\n//           status: 'error',\r\n//           duration: 5000,\r\n//           isClosable: true,\r\n//         });\r\n//       } else {\r\n//         setError('An error occurred. Please try again later.');\r\n//         toast({\r\n//           title: 'Error',\r\n//           description: 'An error occurred. Please try again later.',\r\n//           status: 'error',\r\n//           duration: 5000,\r\n//           isClosable: true,\r\n//         });\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Flex minHeight=\"100vh\" align=\"center\" justify=\"center\">\r\n//       <Box\r\n//         maxWidth=\"lg\"\r\n//         width=\"full\"\r\n//         p={6}\r\n//         borderRadius=\"md\"\r\n//         boxShadow=\"md\"\r\n//         bg=\"white\"\r\n//         display=\"flex\"\r\n//         flexDirection={{ base: 'column', lg: 'row' }}\r\n//         alignItems=\"center\"\r\n//         justifyContent=\"center\"\r\n//       >\r\n//         {/* Left side: Image */}\r\n//         <Box flex=\"1\" display={{ base: 'none', lg: 'block' }} paddingRight=\"6\">\r\n//           <Image\r\n//             src=\"https://via.placeholder.com/400x300\" // Replace with your image URL\r\n//             alt=\"Login Illustration\"\r\n//             borderRadius=\"md\"\r\n//             boxShadow=\"lg\"\r\n//           />\r\n//         </Box>\r\n\r\n//         {/* Right side: Login Form */}\r\n//         <Box flex=\"2\" width=\"100%\">\r\n//           <Heading as=\"h2\" size=\"lg\" mb={4} textAlign=\"center\">\r\n//             Login\r\n//           </Heading>\r\n//           {error && <Text color=\"red.500\" mb={4}>{error}</Text>}\r\n//           {message && <Text color=\"green.500\" mb={4}>{message}</Text>}\r\n\r\n//           <form onSubmit={handleSubmit}>\r\n//             <Stack spacing={4}>\r\n//               {/* Email Field */}\r\n//               <FormControl isRequired>\r\n//                 <FormLabel htmlFor=\"email\">Email</FormLabel>\r\n//                 <Input\r\n//                   type=\"email\"\r\n//                   id=\"email\"\r\n//                   value={email}\r\n//                   onChange={(e) => setEmail(e.target.value)}\r\n//                   placeholder=\"Enter your email\"\r\n//                   size=\"lg\"\r\n//                 />\r\n//               </FormControl>\r\n\r\n//               {/* Password Field */}\r\n//               <FormControl isRequired>\r\n//                 <FormLabel htmlFor=\"password\">Password</FormLabel>\r\n//                 <Input\r\n//                   type=\"password\"\r\n//                   id=\"password\"\r\n//                   value={password}\r\n//                   onChange={(e) => setPassword(e.target.value)}\r\n//                   placeholder=\"Enter your password\"\r\n//                   size=\"lg\"\r\n//                 />\r\n//               </FormControl>\r\n\r\n//               {/* Submit Button */}\r\n//               <Button\r\n//                 type=\"submit\"\r\n//                 colorScheme=\"teal\"\r\n//                 size=\"lg\"\r\n//                 width=\"full\"\r\n//                 mt={4}\r\n//                 isLoading={false}\r\n//               >\r\n//                 Login\r\n//               </Button>\r\n\r\n//               <Text textAlign=\"center\" mt={4}>\r\n//                 Don't have an account? <a href=\"/register\">Sign up</a>\r\n//               </Text>\r\n//             </Stack>\r\n//           </form>\r\n//         </Box>\r\n//       </Box>\r\n//     </Flex>\r\n//   );\r\n// };\r\n\r\n// export default Login;  \r\nimport { Alert, AlertIcon } from '@chakra-ui/react';\r\n\r\nconst Login = () => {\r\n  return (\r\n    <Alert status=\"success\">\r\n      <AlertIcon />\r\n      This is a success message!\r\n    </Alert>\r\n  );\r\n};\r\nexport default Lo"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,KAAK,EAAEC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAClB,oBACED,OAAA,CAACH,KAAK;IAACK,MAAM,EAAC,SAAS;IAAAC,QAAA,gBACrBH,OAAA,CAACF,SAAS;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,8BAEf;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AAEZ,CAAC;AAACC,EAAA,GAPIP,KAAK;AAQX,eAAeQ,EAAE;AAAA,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}